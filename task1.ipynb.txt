{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c74e9fb-704e-407f-bef2-349b6c34f7e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a6308524-905a-4436-9639-77ae796b7b39",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0c09f8ad-efb0-40d7-b12f-69a9a7e51646",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0c55f210-f203-4fcb-a2a1-4ceacacca546",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7341dc16-3355-49a4-9dc0-ecf9a653af07",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "758be59b-a5c3-4d5f-9a97-50e73f1502af",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b6357523-44bf-4916-9981-7349ec5e6354",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4c9c0ff1-b463-44ee-8ccc-e577b0a66ed4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6d648684-f324-48af-8b3f-412e1a662858",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "53a4d333-4ef3-4824-b1cd-5b26d640fc9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0ca58cb1-ab55-46b8-9926-8f4ea70e405e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "05b7afc3-306c-456f-b38b-270d7eaeedab",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0a5d8ad2-1d02-4fdc-85bb-f0f54239025f",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = pd.read_csv(r\"C:\\Users\\lenin\\train_data.txt\",sep=' ::: ', header=None, engine='python')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8218e0cf-8e64-434b-b58c-4fdada15cb8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = pd.read_csv(r\"C:\\Users\\lenin\\test_data.txt\",sep=' ::: ', header=None, engine='python')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8d46ba81-2c2e-406c-a12c-f5bae9e35e2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data.columns=['SI.NO','MOVIE','MOVIETYPE','SUMMARY']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c8951ed8-5840-4f2c-8d8c-4f1250dfadd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data.columns=['SI.NO','MOVIE','SUMMARY']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0d0e2b1c-cf6a-4ec1-a079-1d310fc966b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "      <th>MOVIE</th>\n",
       "      <th>MOVIETYPE</th>\n",
       "      <th>SUMMARY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Oscar et la dame rose (2009)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Listening in to a conversation between his doc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Cupid (1997)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>A brother and sister with a past incestuous re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Young, Wild and Wonderful (1980)</td>\n",
       "      <td>adult</td>\n",
       "      <td>As the bus empties the students for their fiel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>The Secret Sin (1915)</td>\n",
       "      <td>drama</td>\n",
       "      <td>To help their unemployed father make ends meet...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>The Unrecovered (2007)</td>\n",
       "      <td>drama</td>\n",
       "      <td>The film's title refers not only to the un-rec...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SI.NO                             MOVIE MOVIETYPE  \\\n",
       "0      1      Oscar et la dame rose (2009)     drama   \n",
       "1      2                      Cupid (1997)  thriller   \n",
       "2      3  Young, Wild and Wonderful (1980)     adult   \n",
       "3      4             The Secret Sin (1915)     drama   \n",
       "4      5            The Unrecovered (2007)     drama   \n",
       "\n",
       "                                             SUMMARY  \n",
       "0  Listening in to a conversation between his doc...  \n",
       "1  A brother and sister with a past incestuous re...  \n",
       "2  As the bus empties the students for their fiel...  \n",
       "3  To help their unemployed father make ends meet...  \n",
       "4  The film's title refers not only to the un-rec...  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1422fdf2-53ea-4814-95df-924199c9973e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "      <th>MOVIE</th>\n",
       "      <th>SUMMARY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Edgar's Lunch (1998)</td>\n",
       "      <td>L.R. Brane loves his life - his car, his apart...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>La guerra de papá (1977)</td>\n",
       "      <td>Spain, March 1964: Quico is a very naughty chi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Off the Beaten Track (2010)</td>\n",
       "      <td>One year in the life of Albin and his family o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Meu Amigo Hindu (2015)</td>\n",
       "      <td>His father has died, he hasn't spoken with his...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Er nu zhai (1955)</td>\n",
       "      <td>Before he was known internationally as a marti...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SI.NO                        MOVIE  \\\n",
       "0      1         Edgar's Lunch (1998)   \n",
       "1      2     La guerra de papá (1977)   \n",
       "2      3  Off the Beaten Track (2010)   \n",
       "3      4       Meu Amigo Hindu (2015)   \n",
       "4      5            Er nu zhai (1955)   \n",
       "\n",
       "                                             SUMMARY  \n",
       "0  L.R. Brane loves his life - his car, his apart...  \n",
       "1  Spain, March 1964: Quico is a very naughty chi...  \n",
       "2  One year in the life of Albin and his family o...  \n",
       "3  His father has died, he hasn't spoken with his...  \n",
       "4  Before he was known internationally as a marti...  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c1eec8be-4cd7-467f-9fae-5e00837d65e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54214 entries, 0 to 54213\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   SI.NO      54214 non-null  int64 \n",
      " 1   MOVIE      54214 non-null  object\n",
      " 2   MOVIETYPE  54214 non-null  object\n",
      " 3   SUMMARY    54214 non-null  object\n",
      "dtypes: int64(1), object(3)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3799bd05-75ae-4b92-8d48-e6384bad59e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54200 entries, 0 to 54199\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype \n",
      "---  ------   --------------  ----- \n",
      " 0   SI.NO    54200 non-null  int64 \n",
      " 1   MOVIE    54200 non-null  object\n",
      " 2   SUMMARY  54200 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 1.2+ MB\n"
     ]
    }
   ],
   "source": [
    "test_data.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6989b685-dfaf-4fee-bb66-095abfb618cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>54214.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>27107.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>15650.378084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13554.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>27107.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>40660.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>54214.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              SI.NO\n",
       "count  54214.000000\n",
       "mean   27107.500000\n",
       "std    15650.378084\n",
       "min        1.000000\n",
       "25%    13554.250000\n",
       "50%    27107.500000\n",
       "75%    40660.750000\n",
       "max    54214.000000"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5ac651e7-1ac1-484f-ba94-c24361a73837",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>54200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>27100.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>15646.336632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13550.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>27100.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>40650.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>54200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              SI.NO\n",
       "count  54200.000000\n",
       "mean   27100.500000\n",
       "std    15646.336632\n",
       "min        1.000000\n",
       "25%    13550.750000\n",
       "50%    27100.500000\n",
       "75%    40650.250000\n",
       "max    54200.000000"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "50173789-c137-4915-b758-bd82df63a3fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SI.NO        0\n",
       "MOVIE        0\n",
       "MOVIETYPE    0\n",
       "SUMMARY      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3c820753-87eb-4ec4-8fe6-f7c79bce82f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SI.NO      0\n",
       "MOVIE      0\n",
       "SUMMARY    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d03f2fc9-b9ac-408f-873a-60717e849e7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SI.NO        54214\n",
       "MOVIE        54214\n",
       "MOVIETYPE    54214\n",
       "SUMMARY      54214\n",
       "dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.count()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fdd0a63d-8941-46d6-8a14-9af72b67292f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SI.NO      54200\n",
       "MOVIE      54200\n",
       "SUMMARY    54200\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.count()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4a5825cb-7971-48d9-97a1-189d14817945",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "      <th>MOVIE</th>\n",
       "      <th>MOVIETYPE</th>\n",
       "      <th>SUMMARY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Oscar et la dame rose (2009)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Listening in to a conversation between his doc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Cupid (1997)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>A brother and sister with a past incestuous re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Young, Wild and Wonderful (1980)</td>\n",
       "      <td>adult</td>\n",
       "      <td>As the bus empties the students for their fiel...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SI.NO                             MOVIE MOVIETYPE  \\\n",
       "0      1      Oscar et la dame rose (2009)     drama   \n",
       "1      2                      Cupid (1997)  thriller   \n",
       "2      3  Young, Wild and Wonderful (1980)     adult   \n",
       "\n",
       "                                             SUMMARY  \n",
       "0  Listening in to a conversation between his doc...  \n",
       "1  A brother and sister with a past incestuous re...  \n",
       "2  As the bus empties the students for their fiel...  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.iloc[0:3]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "52d64990-cc66-4891-9297-f1b9c922b9a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SI.NO                                                        1\n",
       "MOVIE                             Oscar et la dame rose (2009)\n",
       "MOVIETYPE                                                drama\n",
       "SUMMARY      Listening in to a conversation between his doc...\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.loc[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "551a2a11-e9d5-45e6-8185-a0de936b204c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54214, 4)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "eb1fbd07-3a34-4600-a00a-cac5e5ae90cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54200, 3)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "21a2ac1b-135f-4903-8b24-e601b0cc08c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='MOVIETYPE', ylabel='count'>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlEAAAGwCAYAAACJjDBkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABcUklEQVR4nO3dd3gU5d4+8Ht7Nm3TExZCQg2BUEMLCEE6Ug++FCMBlSoajFQRFbDAz0I5R46CCEQ6x4NB1HMioICC1GgUEGkGSDAhlLAhIaR+f3/w5nlZAgpjlID357r2gp15ZuZ5Zqfc++zMRCciAiIiIiK6I/q7XQEiIiKiexFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaGO92Be4npaWl+OWXX+Dh4QGdTne3q0NERES3QURw+fJl2O126PW337/EEFWBfvnlFwQHB9/tahAREZEGaWlpqFat2m2XZ4iqQB4eHgCufQienp53uTZERER0O3JychAcHKzO47eLIaoClf2E5+npyRBFRER0j7nTS3F4YTkRERGRBnc1RH311Vfo3bs37HY7dDodNmzYcMuyo0ePhk6nw/z5852GFxQUIC4uDn5+fnBzc0OfPn2Qnp7uVCY7OxuxsbGw2Wyw2WyIjY3FpUuXnMqcPn0avXv3hpubG/z8/DBu3DgUFhZWUEuJiIjofnNXQ1ReXh4aN26MBQsW/Gq5DRs2YM+ePbDb7eXGxcfHIzExEWvXrsWOHTuQm5uLXr16oaSkRJWJiYlBSkoKkpKSkJSUhJSUFMTGxqrxJSUl6NmzJ/Ly8rBjxw6sXbsW69evx4QJEyqusURERHR/kUoCgCQmJpYbnp6eLlWrVpWDBw9KSEiIzJs3T427dOmSmEwmWbt2rRp25swZ0ev1kpSUJCIiP/74owCQ3bt3qzK7du0SAPLTTz+JiMh//vMf0ev1cubMGVVmzZo1YrFYxOFw3HYbHA6HALijaYiIiOju0nr+rtTXRJWWliI2NhaTJk1CgwYNyo1PTk5GUVERunbtqobZ7XZERETgm2++AQDs2rULNpsNrVq1UmVat24Nm83mVCYiIsKpp6tbt24oKChAcnLyLetXUFCAnJwcpxcRERH9NVTqEPX666/DaDRi3LhxNx2fmZkJs9kMb29vp+GBgYHIzMxUZQICAspNGxAQ4FQmMDDQaby3tzfMZrMqczOzZ89W11nZbDY+I4qIiOgvpNKGqOTkZPz9739HQkLCHd9yKCJO09xsei1lbjR16lQ4HA71SktLu6N6EhER0b2r0oaor7/+GllZWahevTqMRiOMRiNOnTqFCRMmIDQ0FAAQFBSEwsJCZGdnO02blZWlepaCgoJw9uzZcvM/d+6cU5kbe5yys7NRVFRUrofqehaLRT0Tis+GIiIi+muptCEqNjYWP/zwA1JSUtTLbrdj0qRJ+PzzzwEAkZGRMJlM2Lx5s5ouIyMDBw8eRJs2bQAAUVFRcDgc2Lt3ryqzZ88eOBwOpzIHDx5ERkaGKrNp0yZYLBZERkb+Gc0lIiKie8xdfWJ5bm4ujh8/rt6npqYiJSUFPj4+qF69Onx9fZ3Km0wmBAUFISwsDABgs9kwfPhwTJgwAb6+vvDx8cHEiRPRsGFDdO7cGQAQHh6O7t27Y+TIkVi0aBEAYNSoUejVq5eaT9euXVG/fn3ExsbizTffxMWLFzFx4kSMHDmSvUtERER0U3e1J2r//v1o2rQpmjZtCgAYP348mjZtipdeeum25zFv3jz069cPAwcORNu2beHq6opPPvkEBoNBlVm1ahUaNmyIrl27omvXrmjUqBFWrFihxhsMBnz22WdwcXFB27ZtMXDgQPTr1w9vvfVWxTWWiIiI7is6EZG7XYn7RU5ODmw2GxwOB3uwiIiI7hFaz9+V9pooIiIiosqMIYqIiIhIA4YoIiIiIg3u6t1596v2L6yBwWLVNG3ym0MruDZERET0R2BPFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAH/ADHdschJyzVNxz+uTERE9xP2RBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBrc1RD11VdfoXfv3rDb7dDpdNiwYYMaV1RUhClTpqBhw4Zwc3OD3W7H0KFD8csvvzjNo6CgAHFxcfDz84Obmxv69OmD9PR0pzLZ2dmIjY2FzWaDzWZDbGwsLl265FTm9OnT6N27N9zc3ODn54dx48ahsLDwj2o6ERER3ePuaojKy8tD48aNsWDBgnLjrly5gm+//RYvvvgivv32W3z00Uc4evQo+vTp41QuPj4eiYmJWLt2LXbs2IHc3Fz06tULJSUlqkxMTAxSUlKQlJSEpKQkpKSkIDY2Vo0vKSlBz549kZeXhx07dmDt2rVYv349JkyY8Mc1noiIiO5pxru58B49eqBHjx43HWez2bB582anYW+//TZatmyJ06dPo3r16nA4HFiyZAlWrFiBzp07AwBWrlyJ4OBgbNmyBd26dcPhw4eRlJSE3bt3o1WrVgCAxYsXIyoqCkeOHEFYWBg2bdqEH3/8EWlpabDb7QCAOXPm4LHHHsNrr70GT0/Pm9axoKAABQUF6n1OTs7vXidERER0b7inrolyOBzQ6XTw8vICACQnJ6OoqAhdu3ZVZex2OyIiIvDNN98AAHbt2gWbzaYCFAC0bt0aNpvNqUxERIQKUADQrVs3FBQUIDk5+Zb1mT17tvqJ0GazITg4uCKbS0RERJXYPROirl69iueeew4xMTGqZygzMxNmsxne3t5OZQMDA5GZmanKBAQElJtfQECAU5nAwECn8d7e3jCbzarMzUydOhUOh0O90tLSflcbiYiI6N5xV3/Ou11FRUUYPHgwSktL8c477/xmeRGBTqdT76///+8pcyOLxQKLxfKb9SEiIqL7T6XviSoqKsLAgQORmpqKzZs3O12fFBQUhMLCQmRnZztNk5WVpXqWgoKCcPbs2XLzPXfunFOZG3ucsrOzUVRUVK6HioiIiAio5CGqLEAdO3YMW7Zsga+vr9P4yMhImEwmpwvQMzIycPDgQbRp0wYAEBUVBYfDgb1796oye/bsgcPhcCpz8OBBZGRkqDKbNm2CxWJBZGTkH9lEIiIiukfd1Z/zcnNzcfz4cfU+NTUVKSkp8PHxgd1ux//8z//g22+/xaeffoqSkhLVW+Tj4wOz2QybzYbhw4djwoQJ8PX1hY+PDyZOnIiGDRuqu/XCw8PRvXt3jBw5EosWLQIAjBo1Cr169UJYWBgAoGvXrqhfvz5iY2Px5ptv4uLFi5g4cSJGjhx5yzvziIiI6K/troao/fv348EHH1Tvx48fDwAYNmwYZsyYgY0bNwIAmjRp4jTd1q1b0aFDBwDAvHnzYDQaMXDgQOTn56NTp05ISEiAwWBQ5VetWoVx48apu/j69Onj9Gwqg8GAzz77DGPHjkXbtm1htVoRExODt956649oNhEREd0HdCIid7sS94ucnBzYbDY0jlsIg8WqaR7Jbw6t4FpVvMhJyzVNdy+0jYiI/nrKzt8Oh+OOfoGq1NdEEREREVVWDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQZ3NUR99dVX6N27N+x2O3Q6HTZs2OA0XkQwY8YM2O12WK1WdOjQAYcOHXIqU1BQgLi4OPj5+cHNzQ19+vRBenq6U5ns7GzExsbCZrPBZrMhNjYWly5dcipz+vRp9O7dG25ubvDz88O4ceNQWFj4RzSbiIiI7gN3NUTl5eWhcePGWLBgwU3Hv/HGG5g7dy4WLFiAffv2ISgoCF26dMHly5dVmfj4eCQmJmLt2rXYsWMHcnNz0atXL5SUlKgyMTExSElJQVJSEpKSkpCSkoLY2Fg1vqSkBD179kReXh527NiBtWvXYv369ZgwYcIf13giIiK6pxnv5sJ79OiBHj163HSciGD+/PmYNm0a+vfvDwD44IMPEBgYiNWrV2P06NFwOBxYsmQJVqxYgc6dOwMAVq5cieDgYGzZsgXdunXD4cOHkZSUhN27d6NVq1YAgMWLFyMqKgpHjhxBWFgYNm3ahB9//BFpaWmw2+0AgDlz5uCxxx7Da6+9Bk9Pz5vWsaCgAAUFBep9Tk5Oha0bIiIiqtwq7TVRqampyMzMRNeuXdUwi8WC6OhofPPNNwCA5ORkFBUVOZWx2+2IiIhQZXbt2gWbzaYCFAC0bt0aNpvNqUxERIQKUADQrVs3FBQUIDk5+ZZ1nD17tvqJ0GazITg4uGIaT0RERJVepQ1RmZmZAIDAwECn4YGBgWpcZmYmzGYzvL29f7VMQEBAufkHBAQ4lblxOd7e3jCbzarMzUydOhUOh0O90tLS7rCVREREdK+6qz/n3Q6dTuf0XkTKDbvRjWVuVl5LmRtZLBZYLJZfrQsRERHdnyptT1RQUBAAlOsJysrKUr1GQUFBKCwsRHZ29q+WOXv2bLn5nzt3zqnMjcvJzs5GUVFRuR4qIiIiIqASh6gaNWogKCgImzdvVsMKCwuxfft2tGnTBgAQGRkJk8nkVCYjIwMHDx5UZaKiouBwOLB3715VZs+ePXA4HE5lDh48iIyMDFVm06ZNsFgsiIyM/EPbSURERPemu/pzXm5uLo4fP67ep6amIiUlBT4+PqhevTri4+Mxa9Ys1KlTB3Xq1MGsWbPg6uqKmJgYAIDNZsPw4cMxYcIE+Pr6wsfHBxMnTkTDhg3V3Xrh4eHo3r07Ro4ciUWLFgEARo0ahV69eiEsLAwA0LVrV9SvXx+xsbF48803cfHiRUycOBEjR4685Z15RERE9Nd2V0PU/v378eCDD6r348ePBwAMGzYMCQkJmDx5MvLz8zF27FhkZ2ejVatW2LRpEzw8PNQ08+bNg9FoxMCBA5Gfn49OnTohISEBBoNBlVm1ahXGjRun7uLr06eP07OpDAYDPvvsM4wdOxZt27aF1WpFTEwM3nrrrT96FRAREdE9Sicicrcrcb/IycmBzWZD47iFMFismuaR/ObQCq5VxYuctFzTdPdC24iI6K+n7PztcDju6BeoSntNFBEREVFlxhBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGlTqEFVcXIwXXngBNWrUgNVqRc2aNfHyyy+jtLRUlRERzJgxA3a7HVarFR06dMChQ4ec5lNQUIC4uDj4+fnBzc0Nffr0QXp6ulOZ7OxsxMbGwmazwWazITY2FpcuXfozmklERET3oEodol5//XUsXLgQCxYswOHDh/HGG2/gzTffxNtvv63KvPHGG5g7dy4WLFiAffv2ISgoCF26dMHly5dVmfj4eCQmJmLt2rXYsWMHcnNz0atXL5SUlKgyMTExSElJQVJSEpKSkpCSkoLY2Ng/tb1ERER07zDe7Qr8ml27dqFv377o2bMnACA0NBRr1qzB/v37AVzrhZo/fz6mTZuG/v37AwA++OADBAYGYvXq1Rg9ejQcDgeWLFmCFStWoHPnzgCAlStXIjg4GFu2bEG3bt1w+PBhJCUlYffu3WjVqhUAYPHixYiKisKRI0cQFhZ2F1pPRERElVml7ol64IEH8MUXX+Do0aMAgO+//x47duzAQw89BABITU1FZmYmunbtqqaxWCyIjo7GN998AwBITk5GUVGRUxm73Y6IiAhVZteuXbDZbCpAAUDr1q1hs9lUmZspKChATk6O04uIiIj+Gip1T9SUKVPgcDhQr149GAwGlJSU4LXXXsMjjzwCAMjMzAQABAYGOk0XGBiIU6dOqTJmsxne3t7lypRNn5mZiYCAgHLLDwgIUGVuZvbs2Zg5c6b2BhIREdE9q1L3RK1btw4rV67E6tWr8e233+KDDz7AW2+9hQ8++MCpnE6nc3ovIuWG3ejGMjcr/1vzmTp1KhwOh3qlpaXdTrOIiIjoPlCpe6ImTZqE5557DoMHDwYANGzYEKdOncLs2bMxbNgwBAUFAbjWk1SlShU1XVZWluqdCgoKQmFhIbKzs516o7KystCmTRtV5uzZs+WWf+7cuXK9XNezWCywWCy/v6FERER0z6nUPVFXrlyBXu9cRYPBoB5xUKNGDQQFBWHz5s1qfGFhIbZv364CUmRkJEwmk1OZjIwMHDx4UJWJioqCw+HA3r17VZk9e/bA4XCoMkRERETXq9Q9Ub1798Zrr72G6tWro0GDBvjuu+8wd+5cPPHEEwCu/QQXHx+PWbNmoU6dOqhTpw5mzZoFV1dXxMTEAABsNhuGDx+OCRMmwNfXFz4+Ppg4cSIaNmyo7tYLDw9H9+7dMXLkSCxatAgAMGrUKPTq1Yt35hEREdFNaQpRHTt2xEcffQQvLy+n4Tk5OejXrx++/PLLiqgb3n77bbz44osYO3YssrKyYLfbMXr0aLz00kuqzOTJk5Gfn4+xY8ciOzsbrVq1wqZNm+Dh4aHKzJs3D0ajEQMHDkR+fj46deqEhIQEGAwGVWbVqlUYN26cuouvT58+WLBgQYW0g4iIiO4/OhGRO51Ir9ff9I62rKwsVK1aFUVFRRVWwXtJTk4ObDYbGscthMFi1TSP5DeHVnCtKl7kpOWaprsX2kZERH89Zedvh8MBT0/P257ujnqifvjhB/X/H3/80en2/5KSEiQlJaFq1ap3MksiIiKie9IdhagmTZpAp9NBp9OhY8eO5cZbrVanP8lCREREdL+6oxCVmpoKEUHNmjWxd+9e+Pv7q3FmsxkBAQFO1xkRERER3a/uKESFhIQAgHrEABEREdFfleZHHBw9ehTbtm1DVlZWuVB1/d1zRERERPcjTSFq8eLFePLJJ+Hn54egoKByfz6FIYqIiIjud5pC1KuvvorXXnsNU6ZMqej6EBEREd0TNIWo7OxsDBgwoKLrQn8xWp83BfCZU0REdPdp+tt5AwYMwKZNmyq6LkRERET3DE09UbVr18aLL76I3bt3o2HDhjCZTE7jx40bVyGVIyIiIqqsNIWo9957D+7u7ti+fTu2b9/uNE6n0zFEERER0X1PU4hKTU2t6HoQERER3VM0XRNFRERE9FenqSfqiSee+NXxS5cu1VQZIiIionuF5kccXK+oqAgHDx7EpUuXbvqHiYmIiIjuN5pCVGJiYrlhpaWlGDt2LGrWrPm7K0VERERU2VXYNVF6vR7PPvss5s2bV1GzJCIiIqq0KvTC8hMnTqC4uLgiZ0lERERUKWn6OW/8+PFO70UEGRkZ+OyzzzBs2LAKqRgRERFRZaYpRH333XdO7/V6Pfz9/TFnzpzfvHOPiIiI6H6gKURt3bq1outBREREdE/RFKLKnDt3DkeOHIFOp0PdunXh7+9fUfUiIiIiqtQ0XViel5eHJ554AlWqVEH79u3Rrl072O12DB8+HFeuXKnoOhIRERFVOppC1Pjx47F9+3Z88sknuHTpEi5duoSPP/4Y27dvx4QJEyq6jkRERESVjqaf89avX49///vf6NChgxr20EMPwWq1YuDAgXj33Xcrqn5ERERElZKmnqgrV64gMDCw3PCAgAD+nEdERER/CZpCVFRUFKZPn46rV6+qYfn5+Zg5cyaioqIqrHJERERElZWmn/Pmz5+PHj16oFq1amjcuDF0Oh1SUlJgsViwadOmiq4jERERUaWjKUQ1bNgQx44dw8qVK/HTTz9BRDB48GA8+uijsFqtFV1HIiIiokpHU4iaPXs2AgMDMXLkSKfhS5cuxblz5zBlypQKqRwRERFRZaXpmqhFixahXr165YY3aNAACxcu/N2VIiIiIqrsNIWozMxMVKlSpdxwf39/ZGRk/O5KEREREVV2mkJUcHAwdu7cWW74zp07Ybfbf3eliIiIiCo7TddEjRgxAvHx8SgqKkLHjh0BAF988QUmT57MJ5YTERHRX4KmEDV58mRcvHgRY8eORWFhIQDAxcUFU6ZMwdSpUyu0gkRERESVkaYQpdPp8Prrr+PFF1/E4cOHYbVaUadOHVgsloquHxEREVGlpClElXF3d0eLFi0qqi5ERERE9wxNF5YTERER/dUxRBERERFpwBBFREREpAFDFBEREZEGlT5EnTlzBkOGDIGvry9cXV3RpEkTJCcnq/EighkzZsBut8NqtaJDhw44dOiQ0zwKCgoQFxcHPz8/uLm5oU+fPkhPT3cqk52djdjYWNhsNthsNsTGxuLSpUt/RhOJiIjoHlSpQ1R2djbatm0Lk8mE//73v/jxxx8xZ84ceHl5qTJvvPEG5s6diwULFmDfvn0ICgpCly5dcPnyZVUmPj4eiYmJWLt2LXbs2IHc3Fz06tULJSUlqkxMTAxSUlKQlJSEpKQkpKSkIDY29s9sLhEREd1DftcjDv5or7/+OoKDg7Fs2TI1LDQ0VP1fRDB//nxMmzYN/fv3BwB88MEHCAwMxOrVqzF69Gg4HA4sWbIEK1asQOfOnQEAK1euRHBwMLZs2YJu3brh8OHDSEpKwu7du9GqVSsAwOLFixEVFYUjR44gLCzsz2s0ERER3RMqdU/Uxo0b0bx5cwwYMAABAQFo2rQpFi9erManpqYiMzMTXbt2VcMsFguio6PxzTffAACSk5NRVFTkVMZutyMiIkKV2bVrF2w2mwpQANC6dWvYbDZV5mYKCgqQk5Pj9CIiIqK/hkodon7++We8++67qFOnDj7//HOMGTMG48aNw/LlywEAmZmZAIDAwECn6QIDA9W4zMxMmM1meHt7/2qZgICAcssPCAhQZW5m9uzZ6hoqm82G4OBg7Y0lIiKie0qlDlGlpaVo1qwZZs2ahaZNm2L06NEYOXIk3n33XadyOp3O6b2IlBt2oxvL3Kz8b81n6tSpcDgc6pWWlnY7zSIiIqL7QKUOUVWqVEH9+vWdhoWHh+P06dMAgKCgIAAo11uUlZWleqeCgoJQWFiI7OzsXy1z9uzZcss/d+5cuV6u61ksFnh6ejq9iIiI6K+hUoeotm3b4siRI07Djh49ipCQEABAjRo1EBQUhM2bN6vxhYWF2L59O9q0aQMAiIyMhMlkciqTkZGBgwcPqjJRUVFwOBzYu3evKrNnzx44HA5VhoiIiOh6lfruvGeffRZt2rTBrFmzMHDgQOzduxfvvfce3nvvPQDXfoKLj4/HrFmzUKdOHdSpUwezZs2Cq6srYmJiAAA2mw3Dhw/HhAkT4OvrCx8fH0ycOBENGzZUd+uFh4eje/fuGDlyJBYtWgQAGDVqFHr16sU784iIiOimKnWIatGiBRITEzF16lS8/PLLqFGjBubPn49HH31UlZk8eTLy8/MxduxYZGdno1WrVti0aRM8PDxUmXnz5sFoNGLgwIHIz89Hp06dkJCQAIPBoMqsWrUK48aNU3fx9enTBwsWLPjzGktERET3FJ2IyN2uxP0iJycHNpsNjeMWwmCxappH8ptDK7hWFS9y0nJN093YNq3zudm8iIiItCo7fzscjju6vrlSXxNFREREVFkxRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGjBEEREREWnAEEVERESkAUMUERERkQYMUUREREQaMEQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGDFFEREREGhjvdgWIiH6vyEnLNU+b/ObQCqwJEf2VsCeKiIiISAOGKCIiIiINGKKIiIiINGCIIiIiItKAIYqIiIhIA4YoIiIiIg0YooiIiIg0YIgiIiIi0oAhioiIiEgDhigiIiIiDRiiiIiIiDRgiCIiIiLSgCGKiIiISAOGKCIiIiINGKKIiIiINGCIIiIiItKAIYqIiIhIA4YoIiIiIg0YooiIiIg0YIgiIiIi0oAhioiIiEgDhigiIiIiDRiiiIiIiDS4p0LU7NmzodPpEB8fr4aJCGbMmAG73Q6r1YoOHTrg0KFDTtMVFBQgLi4Ofn5+cHNzQ58+fZCenu5UJjs7G7GxsbDZbLDZbIiNjcWlS5f+hFYRERHRveieCVH79u3De++9h0aNGjkNf+ONNzB37lwsWLAA+/btQ1BQELp06YLLly+rMvHx8UhMTMTatWuxY8cO5ObmolevXigpKVFlYmJikJKSgqSkJCQlJSElJQWxsbF/WvuIiIjo3nJPhKjc3Fw8+uijWLx4Mby9vdVwEcH8+fMxbdo09O/fHxEREfjggw9w5coVrF69GgDgcDiwZMkSzJkzB507d0bTpk2xcuVKHDhwAFu2bAEAHD58GElJSXj//fcRFRWFqKgoLF68GJ9++imOHDlyy3oVFBQgJyfH6UVERER/DfdEiHrqqafQs2dPdO7c2Wl4amoqMjMz0bVrVzXMYrEgOjoa33zzDQAgOTkZRUVFTmXsdjsiIiJUmV27dsFms6FVq1aqTOvWrWGz2VSZm5k9e7b6+c9msyE4OLhC2ktERESVX6UPUWvXrsW3336L2bNnlxuXmZkJAAgMDHQaHhgYqMZlZmbCbDY79WDdrExAQEC5+QcEBKgyNzN16lQ4HA71SktLu7PGERER0T3LeLcr8GvS0tLwzDPPYNOmTXBxcbllOZ1O5/ReRMoNu9GNZW5W/rfmY7FYYLFYfnU5REREdH+q1D1RycnJyMrKQmRkJIxGI4xGI7Zv345//OMfMBqNqgfqxt6irKwsNS4oKAiFhYXIzs7+1TJnz54tt/xz586V6+UiIiIiAip5iOrUqRMOHDiAlJQU9WrevDkeffRRpKSkoGbNmggKCsLmzZvVNIWFhdi+fTvatGkDAIiMjITJZHIqk5GRgYMHD6oyUVFRcDgc2Lt3ryqzZ88eOBwOVYaIiIjoepX65zwPDw9EREQ4DXNzc4Ovr68aHh8fj1mzZqFOnTqoU6cOZs2aBVdXV8TExAAAbDYbhg8fjgkTJsDX1xc+Pj6YOHEiGjZsqC5UDw8PR/fu3TFy5EgsWrQIADBq1Cj06tULYWFhf2KLiYiI6F5RqUPU7Zg8eTLy8/MxduxYZGdno1WrVti0aRM8PDxUmXnz5sFoNGLgwIHIz89Hp06dkJCQAIPBoMqsWrUK48aNU3fx9enTBwsWLPjT20NERET3hnsuRG3bts3pvU6nw4wZMzBjxoxbTuPi4oK3334bb7/99i3L+Pj4YOXKlRVUSyIiIrrfVeprooiIiIgqK4YoIiIiIg0YooiIiIg0YIgiIiIi0oAhioiIiEgDhigiIiIiDRiiiIiIiDRgiCIiIiLSgCGKiIiISAOGKCIiIiINGKKIiIiINGCIIiIiItKAIYqIiIhIA4YoIiIiIg0YooiIiIg0YIgiIiIi0oAhioiIiEgDhigiIiIiDRiiiIiIiDRgiCIiIiLSgCGKiIiISAOGKCIiIiINGKKIiIiINGCIIiIiItKAIYqIiIhIA4YoIiIiIg0YooiIiIg0YIgiIiIi0oAhioiIiEgDhigiIiIiDRiiiIiIiDRgiCIiIiLSgCGKiIiISAOGKCIiIiINGKKIiIiINGCIIiIiItKAIYqIiIhIA4YoIiIiIg0YooiIiIg0MN7tChDdjyInLdc8bfKbQyuwJkRE9Eep1D1Rs2fPRosWLeDh4YGAgAD069cPR44ccSojIpgxYwbsdjusVis6dOiAQ4cOOZUpKChAXFwc/Pz84Obmhj59+iA9Pd2pTHZ2NmJjY2Gz2WCz2RAbG4tLly790U0kIiKie1SlDlHbt2/HU089hd27d2Pz5s0oLi5G165dkZeXp8q88cYbmDt3LhYsWIB9+/YhKCgIXbp0weXLl1WZ+Ph4JCYmYu3atdixYwdyc3PRq1cvlJSUqDIxMTFISUlBUlISkpKSkJKSgtjY2D+1vURERHTvqNQ/5yUlJTm9X7ZsGQICApCcnIz27dtDRDB//nxMmzYN/fv3BwB88MEHCAwMxOrVqzF69Gg4HA4sWbIEK1asQOfOnQEAK1euRHBwMLZs2YJu3brh8OHDSEpKwu7du9GqVSsAwOLFixEVFYUjR44gLCzsz204ERERVXqVuifqRg6HAwDg4+MDAEhNTUVmZia6du2qylgsFkRHR+Obb74BACQnJ6OoqMipjN1uR0REhCqza9cu2Gw2FaAAoHXr1rDZbKrMzRQUFCAnJ8fpRURERH8N90yIEhGMHz8eDzzwACIiIgAAmZmZAIDAwECnsoGBgWpcZmYmzGYzvL29f7VMQEBAuWUGBASoMjcze/ZsdQ2VzWZDcHCw9gYSERHRPeWeCVFPP/00fvjhB6xZs6bcOJ1O5/ReRMoNu9GNZW5W/rfmM3XqVDgcDvVKS0v7rWYQERHRfeKeCFFxcXHYuHEjtm7dimrVqqnhQUFBAFCutygrK0v1TgUFBaGwsBDZ2dm/Wubs2bPllnvu3LlyvVzXs1gs8PT0dHoRERHRX0OlDlEigqeffhofffQRvvzyS9SoUcNpfI0aNRAUFITNmzerYYWFhdi+fTvatGkDAIiMjITJZHIqk5GRgYMHD6oyUVFRcDgc2Lt3ryqzZ88eOBwOVYaIiIjoepX67rynnnoKq1evxscffwwPDw/V42Sz2WC1WqHT6RAfH49Zs2ahTp06qFOnDmbNmgVXV1fExMSossOHD8eECRPg6+sLHx8fTJw4EQ0bNlR364WHh6N79+4YOXIkFi1aBAAYNWoUevXqxTvziIiI6KYqdYh69913AQAdOnRwGr5s2TI89thjAIDJkycjPz8fY8eORXZ2Nlq1aoVNmzbBw8NDlZ83bx6MRiMGDhyI/Px8dOrUCQkJCTAYDKrMqlWrMG7cOHUXX58+fbBgwYI/toFERER0z6rUIUpEfrOMTqfDjBkzMGPGjFuWcXFxwdtvv4233377lmV8fHywcuVKLdUkIiKiv6BKfU0UERERUWXFEEVERESkAUMUERERkQYMUUREREQaVOoLywmInLRc87TJbw6twJoQERHR9dgTRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAFDFBEREZEGfMQBEd0RPnaDiOga9kQRERERacAQRURERKQBQxQRERGRBgxRRERERBowRBERERFpwBBFREREpAEfcUBERHdE62Mu+IgLut+wJ4qIiIhIA4YoIiIiIg0YooiIiIg04DVRRNfhtR5ERHS72BNFREREpAF7ooiI6K7gH7Omex1DFBFRJcagQVR5MUQREf0BeH0d0f2PIYqIiOgvgL2aFY8hiojof/EkQ0R3giHqL4InByIioorFRxwQERERacAQRURERKQBf86jex5/qrw9XE9ERBWLPVFEREREGrAniqgSY+8REVHlxRBFRPQXwEBOVPEYoojoruFTvamicFuiu4HXRBERERFpwJ4oIiKi/1UZf/a8n3vZ7vW2sSeKiIiISAP2RBEREVWwytijVVHu57bdKYaoG7zzzjt48803kZGRgQYNGmD+/Plo167d3a4WERER3cLdCnb8Oe8669atQ3x8PKZNm4bvvvsO7dq1Q48e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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='MOVIETYPE', data=train_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "47f48607-f1bd-4765-8f1c-8cb793aa74e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "d2e5f2fd-c230-44d3-8f95-71e6b78b4b1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x21609416e40>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train_data.MOVIETYPE, kde =True, color = \"black\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "cdd056df-795e-4e88-968c-cf4792eac090",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1400x1000 with 0 Axes>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1400x1000 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (14,10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "502d1506-4eb5-452b-9117-618d80547eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "count1=train_data.MOVIETYPE.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "73971346-dd47-4534-9d76-695df3f60dc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='count', ylabel='MOVIETYPE'>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=count1,y=count1.index,orient='h',color='pink')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "26ff86c4-53c2-4464-91df-281efe69ca36",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "faae0228-c00d-43b2-9daf-0cbc0ebd71e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined=pd.concat([train_data,test_data],axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "b2205064-1aea-441b-adde-3191374b2af0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "      <th>MOVIE</th>\n",
       "      <th>MOVIETYPE</th>\n",
       "      <th>SUMMARY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Oscar et la dame rose (2009)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Listening in to a conversation between his doc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Cupid (1997)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>A brother and sister with a past incestuous re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Young, Wild and Wonderful (1980)</td>\n",
       "      <td>adult</td>\n",
       "      <td>As the bus empties the students for their fiel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>The Secret Sin (1915)</td>\n",
       "      <td>drama</td>\n",
       "      <td>To help their unemployed father make ends meet...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>The Unrecovered (2007)</td>\n",
       "      <td>drama</td>\n",
       "      <td>The film's title refers not only to the un-rec...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SI.NO                             MOVIE MOVIETYPE  \\\n",
       "0      1      Oscar et la dame rose (2009)     drama   \n",
       "1      2                      Cupid (1997)  thriller   \n",
       "2      3  Young, Wild and Wonderful (1980)     adult   \n",
       "3      4             The Secret Sin (1915)     drama   \n",
       "4      5            The Unrecovered (2007)     drama   \n",
       "\n",
       "                                             SUMMARY  \n",
       "0  Listening in to a conversation between his doc...  \n",
       "1  A brother and sister with a past incestuous re...  \n",
       "2  As the bus empties the students for their fiel...  \n",
       "3  To help their unemployed father make ends meet...  \n",
       "4  The film's title refers not only to the un-rec...  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "1c56a1ee-cb09-40cc-83bb-689c4561724f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(108414, 4)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "ab6edeac-7e87-4461-b8c4-cd301f4751b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "433656"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.size\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "6192e9a5-bf35-4bd9-aaf3-98c1205caad6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SI.NO        False\n",
       "MOVIE        False\n",
       "MOVIETYPE     True\n",
       "SUMMARY      False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "4033363e-e19e-4dd2-8aca-90f378f8dcc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.duplicated().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "ae3a6a8c-01e5-42f2-8d08-9c65318fbe2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_solution = pd.read_csv(r\"C:\\Users\\lenin\\train_data.txt\",sep=' ::: ', header=None, engine='python')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "12883f5e-9623-45b3-9d27-35dee47d9603",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_solution.columns=['SI.NO','MOVIE','MOVIETYPE','SUMMARY']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "31924ec0-23f7-43af-91c9-b35a5a6746d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SI.NO</th>\n",
       "      <th>MOVIE</th>\n",
       "      <th>MOVIETYPE</th>\n",
       "      <th>SUMMARY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Oscar et la dame rose (2009)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Listening in to a conversation between his doc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Cupid (1997)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>A brother and sister with a past incestuous re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Young, Wild and Wonderful (1980)</td>\n",
       "      <td>adult</td>\n",
       "      <td>As the bus empties the students for their fiel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>The Secret Sin (1915)</td>\n",
       "      <td>drama</td>\n",
       "      <td>To help their unemployed father make ends meet...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>The Unrecovered (2007)</td>\n",
       "      <td>drama</td>\n",
       "      <td>The film's title refers not only to the un-rec...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SI.NO                             MOVIE MOVIETYPE  \\\n",
       "0      1      Oscar et la dame rose (2009)     drama   \n",
       "1      2                      Cupid (1997)  thriller   \n",
       "2      3  Young, Wild and Wonderful (1980)     adult   \n",
       "3      4             The Secret Sin (1915)     drama   \n",
       "4      5            The Unrecovered (2007)     drama   \n",
       "\n",
       "                                             SUMMARY  \n",
       "0  Listening in to a conversation between his doc...  \n",
       "1  A brother and sister with a past incestuous re...  \n",
       "2  As the bus empties the students for their fiel...  \n",
       "3  To help their unemployed father make ends meet...  \n",
       "4  The film's title refers not only to the un-rec...  "
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_solution.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "f651ca89-7cef-45b6-8606-d5b7aa964414",
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf = TfidfVectorizer(max_features=5000,ngram_range=(1, 2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "74b26aa5-a778-490e-a219-d894c436a7b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "label_encoder = LabelEncoder()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "be3ecca4-4b77-46df-8dcf-19aa7f46df36",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data['MOVIETYPE'] = label_encoder.fit_transform(train_data['MOVIETYPE'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "1564b5ca-e8be-476e-a719-28f0923ce1fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_solution['MOVIETYPE'] = label_encoder.fit_transform(test_solution['MOVIETYPE'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "28abab92-b0ce-4e2d-ae39-007a004a8cff",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = tfidf.fit_transform(train_data['SUMMARY'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "4b0bd0fe-030c-4b4c-b1d5-facb7e6ba064",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test = tfidf.transform(test_data['SUMMARY'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "fb9eb447-588f-4143-9025-b897fcc426d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = train_data['MOVIETYPE']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "efb8c860-a733-4321-84de-464c76a6b650",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test = test_solution['MOVIETYPE']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "57e17cec-4f13-47f9-ab91-8ba79b1aa799",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_names = tfidf.get_feature_names_out()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "18af99f2-0716-4976-9e26-5c15a6be6b03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Names: ['000' '10' '100' ... 'your' 'yourself' 'youth']\n"
     ]
    }
   ],
   "source": [
    "print(\"Feature Names:\", feature_names)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "d70ff1c1-e0c1-4866-b458-db03acdb1b7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (54214, 5000)\n"
     ]
    }
   ],
   "source": [
    "print(\"X_train shape:\", x_train.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "dbd2fa8b-229e-43ef-b274-e2a2e207dd85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y_train length: 54214\n"
     ]
    }
   ],
   "source": [
    "print(\"Y_train length:\", len(y_train))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "0edd6b9a-0ca5-4e46-882b-0bbce4488031",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_train_split length: 54214\n"
     ]
    }
   ],
   "source": [
    "print(\"y_train_split length:\", len(y_train))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "029b2c64-f5e8-49c0-9d31-9fd8c185f1b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_test_split length: 54214\n"
     ]
    }
   ],
   "source": [
    "print(\"y_test_split length:\", len(y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "5f9118cd-8f2b-4e66-8648-0bf330eacdcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train ,y_test = train_test_split(x_train, y_train, test_size=0.25, random_state=4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "d4df2e98-ffa8-4332-8bd3-0de4fd6a2c42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train_split shape: (40660, 5000)\n"
     ]
    }
   ],
   "source": [
    "print(\"X_train_split shape:\", x_train.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "1969f55d-e223-49a9-a386-947deb26356d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_test_split shape: (13554, 5000)\n"
     ]
    }
   ],
   "source": [
    "print(\"X_test_split shape:\", x_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "c623dc5f-209d-4773-9390-20f864384c57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_train_split length: 40660\n"
     ]
    }
   ],
   "source": [
    "print(\"y_train_split length:\", len(y_train))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "98d535d7-d9bd-4003-8f99-dba7e72e2a59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_test_split length: 13554\n"
     ]
    }
   ],
   "source": [
    "print(\"y_test_split length:\", len(y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "6949ed96-e0e3-41dd-8a89-740b28b079f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB(alpha=0.5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;MultinomialNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.naive_bayes.MultinomialNB.html\">?<span>Documentation for MultinomialNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>MultinomialNB(alpha=0.5)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "MultinomialNB(alpha=0.5)"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = MultinomialNB(alpha=0.5)\n",
    "model.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "9257ad40-f6f2-4321-8e41-632463d3680d",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(x_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "f4c7cb45-dd58-43a1-afc3-376a0d19ad8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy = accuracy_score(y_test, y_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "4c63d532-c9d4-4546-b642-f76c9867ebc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5184447395602774\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy:\", accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "1560f9f3-fb5b-4400-ac40-0232c61f3db4",
   "metadata": {},
   "outputs": [],
   "source": [
    "logistic_regression_model=LogisticRegression()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "6cc4ca7f-b49e-45ab-a41e-dc784ab0388c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\lenin\\anaconda3\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logistic_regression_model.fit(x_train,y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "83c28736-be80-41f0-b8e3-26f1b25e2372",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_predict=logistic_regression_model.predict(x_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "84ce8ae3-582c-4fee-8f5e-081a9b34abd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "3b7702cf-5bbb-465a-be26-43846fb7d017",
   "metadata": {},
   "outputs": [],
   "source": [
    "mse = mean_squared_error(y_test, lr_predict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "cc858550-adea-4037-a372-3e06f02135d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "mae = mean_absolute_error(y_test, lr_predict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "567f366c-5351-4cb1-a1cf-68b5d7276e0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "r2 = r2_score(y_test, lr_predict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "ef54fae0-c3f9-4f3a-9617-193b8fd94fa1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression Performance:\n"
     ]
    }
   ],
   "source": [
    "print(\"Linear Regression Performance:\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "bc55d8d5-abcf-40a4-9b76-49041f65a60d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 41.87568245536373\n"
     ]
    }
   ],
   "source": [
    "print(f\"Mean Squared Error (MSE): {mse}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "4c1c88f1-8257-44e5-b73a-6ab649cd42ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 3.3859377305592444\n"
     ]
    }
   ],
   "source": [
    "print(f\"Mean Absolute Error (MAE): {mae}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "0657a8e1-6f8c-4346-a451-ecd7338c87a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score: -0.02609605059977138\n"
     ]
    }
   ],
   "source": [
    "print(f\"R2 Score: {r2}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "6c46ff88-a74b-4b75-8410-6986c14e95c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score: 0.5861000442673749\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy score:\",accuracy_score(y_test,lr_predict))      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64ac6873-484d-427b-9619-97a400296ec6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
